# Copyright 2018 Starter Bot

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#     http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: This is a AWS Serverless Application Repository to build a Facebook bot and handle location information.

Parameters:   
  1PageAccessToken:
    Description: Token from Facebook linking the app to the page (FB_PAGE_ACCESS_TOKEN)
    Type: String
    NoEcho: true
  
  2GoogleMapsKey:
    Description: Key from Google Maps for your particular GCP project (GOOGLE_MAPS_KEY)
    Type: String
    NoEcho: true

  3VerificationBotToken:
    Description: Token you make up to verify your webhook with Facebook (FB_VERIFICATION_BOT_TOKEN)
    Type: String
    NoEcho: true
    
Resources:
  FacebookBotAPI:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          version: '2017-06-11T02:20:25Z'
          title: !Ref 'AWS::StackName'
        basePath: /Prod
        schemes:
          - https
        paths:
          /:
            post:
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FacebookBotFunction.Arn}/invocations
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws
            get:
              consumes:
                - application/json
              produces:
                - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FacebookBotFunction.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                requestTemplates:
                  application/json: >
                    ##  See
                    http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html

                    ##  This template will pass through all parameters including
                    path, querystring, header, stage variables, and context
                    through to the integration endpoint via the body/payload

                    #set($allParams = $input.params())

                    {

                    "body-json" : $input.json('$'),

                    "params" : {

                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end

                    },

                    "stage-variables" : {

                    #foreach($key in $stageVariables.keySet())

                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end

                    },

                    "context" : {
                        "account-id" : "$context.identity.accountId",
                        "api-id" : "$context.apiId",
                        "api-key" : "$context.identity.apiKey",
                        "authorizer-principal-id" : "$context.authorizer.principalId",
                        "caller" : "$context.identity.caller",
                        "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                        "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                        "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                        "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                        "http-method" : "$context.httpMethod",
                        "stage" : "$context.stage",
                        "source-ip" : "$context.identity.sourceIp",
                        "user" : "$context.identity.user",
                        "user-agent" : "$context.identity.userAgent",
                        "user-arn" : "$context.identity.userArn",
                        "request-id" : "$context.requestId",
                        "resource-id" : "$context.resourceId",
                        "resource-path" : "$context.resourcePath"
                        }
                    }
                contentHandling: CONVERT_TO_TEXT
                type: aws
        definitions:
          Empty:
            type: object
            title: Empty Schema

  FacebookBotFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: >-
        Facebook bot to help determine various location information based on
        different inputs
      Handler: index.handler
      Runtime: nodejs8.10
      CodeUri: s3://cf-templates-ijazr0umwux6-us-east-1/fb-location-demo-lambda1.zip
      MemorySize: 128
      Timeout: 10
      Environment:
        Variables:
          FB_PAGE_ACCESS_TOKEN: !Ref 1PageAccessToken
          GOOGLE_MAPS_KEY: !Ref 2GoogleMapsKey
          FB_VERIFICATION_BOT_TOKEN: !Ref 3VerificationBotToken
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref FacebookBotAPI
        Api2:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref FacebookBotAPI
      Policies: 
        - CloudWatchPutMetricPolicy: {}

Outputs:
  RequestURL:
    Description: Prod URL for API to use as Request URL for Facebook bot
    Value: !Sub 'https://${FacebookBotAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
